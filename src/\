use std::env;
use std::path::PathBuf;
use std::io::{BufReader, BufRead};
use std::fs::File;
use std::fmt;


#[derive(Debug)]
enum TokenType {
    LBrace,
    RBrace,
    Colon,
    String,
    Number, }

struct Token {
    r#type: TokenType
}

impl fmt::Debug for Token {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Token{{type: {:?}}}", self.r#type)
    }
}

fn tokenize<R: BufRead>(r: R) -> Vec<Token> {
    let buffer: Vec<u8>;
    r.read_to_end(&mut buffer);

    for byte in buffer {
        println!("{}", byte);
    }
    Vec::<Token>::new()
}

fn main() { const usage: &str = "usage: json_parser path/to/json/file";
    let args: Vec<String> = env::args().collect();

    if args.len() != 2 {
        println!("{}", usage);
        std::process::exit(1);
    }

    let rel_path = PathBuf::from(args[1].to_string());
    let full_path = match rel_path.canonicalize() {
        Ok(v) => v,
        Err(e) => {
            println!("File Error: {}", e);
            std::process::exit(1);
        }
    };

    println!("Parsing file: {:?}", full_path);
    let file = match File::open(full_path) {
        Ok(v) => v,
        Err(e) => {
            println!("File Error: {}", e);
            std::process::exit(1);
        }
    };

    let reader = BufReader::new(file);
    let tokens: Vec<Token> = tokenize(&mut reader);
    println!("{:?}", tokens);
}
